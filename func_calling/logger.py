"""
logger.py is used to record the logs of the assistant and user messages.
And record the logs of the tools used and code generated by the assistant.
"""

from datetime import datetime
import json
import os.path
from pathlib import Path
from typing import Union, Optional
import re


def _extract_code(response: str) -> list[dict]:
    pattern = r"```(python|bash)\n(.*?)\n```"
    code = []
    for match in re.finditer(pattern, response, re.DOTALL):
        code.append({"language": match.group(1), "code": match.group(2)})
    return code


class Logger:
    def __init__(self):
        self.assistant = []
        self.user = []
        self.analysis = []
        self.tools = []
        self.code = []
        self.error = []
        self.filename = None
        self.filedir = None
        self.finish_reason = "unknown"

    def set(self, analysis_filename: str):
        self.filename = Path(analysis_filename)
        self.filedir = self.filename.parent

    def save(self):
        self.filedir.mkdir(parents=True, exist_ok=True)
        self.filename.write_text(json.dumps({
            "assistant": self.assistant,
            "user": self.user,
            "tools": self.tools,
            "code": self.code,
            "finish_reason": self.finish_reason
        }, indent=4))

    def user_message(self, rounds: int, message: str):
        self.user.append({"rounds": rounds, "message": message})

    def assistant_message(self, rounds: int, message: str):
        self.assistant.append({"rounds": rounds, "message": message})
        if _extract_code(message):
            self._code_generated(rounds, message)
        else:
            self.analysis.append({"rounds": rounds, "message": message})

    def tool_used(self, rounds: int,
                  tool_result: Optional[list[dict]] = None):
        if tool_result:
            self.tools.append({"rounds": rounds, "tool_result": tool_result})
        else:
            self.tools.append({"rounds": rounds, "tool_result": None})

    def _code_generated(self, rounds: int, response: str):
        self.code.append({"rounds": rounds, "code": _extract_code(response)})

    def error_tool(self, rounds: int, error: dict):
        self.error.append({"rounds": rounds, "error": error})

    def finish(self, reason: str):
        self.finish_reason = reason
        self.save()


class GlobalLogger:
    def __init__(self):
        self.analysis = []
        self.python_code = []
        self.bash_code = []
        self.no_code = []
        self.error_python = []
        self.error_bash = []
        self.partially_solved = []
        self.solved = []
        self.unsolved = []
        self.unknown = []
        self.exception = []

    def append_analysis(self, challenge: str):
        self.analysis.append(challenge)

    def append_python_code(self, challenge: str):
        self.python_code.append(challenge)

    def append_bash_code(self, challenge: str):
        self.bash_code.append(challenge)

    def append_no_code(self, challenge: str):
        self.no_code.append(challenge)

    def append_error_python(self, challenge: str):
        self.error_python.append(challenge)

    def append_error_bash(self, challenge: str):
        self.error_bash.append(challenge)

    def append_partially_solved(self, challenge: str):
        self.partially_solved.append(challenge)

    def append_solved(self, challenge: str):
        self.solved.append(challenge)

    def append_unsolved(self, challenge: str):
        self.unsolved.append(challenge)

    def append_unknown(self, challenge: str):
        self.unknown.append(challenge)

    def append_exception(self, challenge: str, exception: str):
        self.exception.append({challenge: exception})

    def write_to_file(self, file: Union[str, Path]):
        data = {
            "analysis": self.analysis,
            "python_code": self.python_code,
            "bash_code": self.bash_code,
            "no_code": self.no_code,
            "error_python": self.error_python,
            "error_bash": self.error_bash,
            "partially_solved": self.partially_solved,
            "solved": self.solved,
            "unsolved": self.unsolved,
            "unknown": self.unknown,
            "exception": self.exception,
        }
        if isinstance(file, str):
            file = Path(file)
        with open(os.path.abspath(file), "w") as f:
            json.dump(data, f, indent=4)
