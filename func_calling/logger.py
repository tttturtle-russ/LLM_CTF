"""
logger.py is used to record the logs of the assistant and user messages.
And record the logs of the tools used and code generated by the assistant.
"""
import json
import os.path
from pathlib import Path
from typing import Union


class Logger:
    def __init__(self):
        self.analysis = []
        self.python_code = []
        self.bash_code = []
        self.no_code = []
        self.error_python = []
        self.error_bash = []
        self.partially_solved = []
        self.solved = []
        self.unsolved = []
        self.unknown = []
        self.exception = []

    def append_analysis(self, challenge: str):
        self.analysis.append(challenge)

    def append_python_code(self, challenge: str):
        self.python_code.append(challenge)

    def append_bash_code(self, challenge: str):
        self.bash_code.append(challenge)

    def append_no_code(self, challenge: str):
        self.no_code.append(challenge)

    def append_error_python(self, challenge: str):
        self.error_python.append(challenge)

    def append_error_bash(self, challenge: str):
        self.error_bash.append(challenge)

    def append_partially_solved(self, challenge: str):
        self.partially_solved.append(challenge)

    def append_solved(self, challenge: str):
        self.solved.append(challenge)

    def append_unsolved(self, challenge: str):
        self.unsolved.append(challenge)

    def append_unknown(self, challenge: str):
        self.unknown.append(challenge)

    def append_exception(self, challenge: str, exception: str):
        self.exception.append({challenge: exception})

    def write_to_file(self, file: Union[str, Path]):
        data = {
            "analysis": self.analysis,
            "python_code": self.python_code,
            "bash_code": self.bash_code,
            "no_code": self.no_code,
            "error_python": self.error_python,
            "error_bash": self.error_bash,
            "partially_solved": self.partially_solved,
            "solved": self.solved,
            "unsolved": self.unsolved,
            "unknown": self.unknown,
            "exception": self.exception,
        }
        if isinstance(file, str):
            file = Path(file)
        with open(os.path.abspath(file), "w") as f:
            json.dump(data, f, indent=4)
